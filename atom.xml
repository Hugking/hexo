<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wkaanig的个人博客</title>
  
  <subtitle>Hugking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wkaanig.cn/"/>
  <updated>2019-09-10T13:47:42.143Z</updated>
  <id>http://www.wkaanig.cn/</id>
  
  <author>
    <name>wkaanig</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 新建及发布文章</title>
    <link href="http://www.wkaanig.cn/2019/09/10/hexo_new/"/>
    <id>http://www.wkaanig.cn/2019/09/10/hexo_new/</id>
    <published>2019-09-10T13:15:36.618Z</published>
    <updated>2019-09-10T13:47:42.143Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><p><em>前面已经搭建好了Hexo博客，并成功发布到了Github上面，但是怎么才能把新写的文章发布上去呢？</em></p><h1 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>进入你的博客目录，在 /source/_posts 文件夹下直接建立一个.md文件。<br><em>注意：</em>文件的开头有固定的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo新建及发布文章 # 标题</span><br><span class="line">date: 2019-01-03 23:00:32 #时间</span><br><span class="line">categories:</span><br><span class="line">  - Hexo # 分类</span><br><span class="line">tags:</span><br><span class="line">  - 杂项 # 标签</span><br><span class="line">toc: true # 是否启用内容索引</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  &lt;folder&gt;</span><br><span class="line">hexo new <span class="string">"title"</span></span><br></pre></td></tr></table></figure><p>这样就会在 /source/_posts 文件夹下，新建好一个 .md 文件，同时该文件中的头部信息 也会给你默认生成。</p><h2 id="部署文章"><a href="#部署文章" class="headerlink" title="部署文章"></a>部署文章</h2><p><code>generate</code> 生成静态页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate # 可简写成 hexo g</span><br></pre></td></tr></table></figure><p><code>deploy</code> 将内容部署到 Github 网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy # 可以简写成 hexo d</span><br></pre></td></tr></table></figure><h2 id="异地修改"><a href="#异地修改" class="headerlink" title="异地修改"></a>异地修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. git clone 你的博客地址</span><br><span class="line">2. hexo c # 清理缓存</span><br><span class="line">3. hexo g # 重新生成静态文件</span><br><span class="line">4. hexo s # 本地预览</span><br><span class="line">4. hexo d # 部署至Github</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;em&gt;前面已经搭建好了Hexo博客，并成功发布到了Github上面，但是怎么才能把新写的文章发布上去呢？&lt;/em&gt;&lt;/p&gt;&lt;h1 id=&quot;创建
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.wkaanig.cn/categories/Hexo/"/>
    
    
      <category term="杂项" scheme="http://www.wkaanig.cn/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Github-Page 搭建及部署个人博客</title>
    <link href="http://www.wkaanig.cn/2019/09/10/hexo/"/>
    <id>http://www.wkaanig.cn/2019/09/10/hexo/</id>
    <published>2019-09-10T12:34:53.827Z</published>
    <updated>2019-09-10T13:47:53.239Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><h2 id="运用-hexo-在-GitHub-上搭建个人博客"><a href="#运用-hexo-在-GitHub-上搭建个人博客" class="headerlink" title="运用 hexo 在 GitHub 上搭建个人博客"></a>运用 hexo 在 GitHub 上搭建个人博客</h2><p>作为小白想搭建一个个人博客，在网上看了很多的教程，发现大家搭建的博客都挺赏心悦目的，为了节约服务器资源就在 GitHub 上搭建了自己的博客，分享一些踩坑的经验。</p><h2 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h2><ul><li><p>首先你必须有一个 github 账号</p></li><li><p>然后新建一个仓库，这一有第一个坑，我之前用了不同于 github 用户名(Hugking)来作为项目名称（wkaanig.github.io），一直没能搭建成功，后来看到其他大牛的经验，才发现项目名一定要是用户名(Hugking).github.io 的形式(README.md 可选可不选)</p></li><li><p>在 github 中 setting 添加生成页面的选项 Source 选择 master branch</p><p><em>注意：</em><br>如果你之前没有用 git 关联过自己的 github 库，需要配置 SSH 等参数，否则无法成功，这部分搜 git 就有很多相关教程</p></li></ul><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>hexo 有中文的文档，这一点非常方便，但是在安装过程中还是很容易有疏忽的地方，导致安装失败。<br>安装 Hexo 之前，必须保证自己的电脑中已经安装好了 Node.js 和 Git。因为这两个软件我之前都安装过，这里就不重复安装过程了，检验方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> --version</span><br><span class="line"><span class="variable">$node</span> --v</span><br></pre></td></tr></table></figure><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>安装好 node.js 和 git 后，可以通过 npm 来安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo v <span class="comment"># 查看版本</span></span><br><span class="line">npm install hexo-deployer-git --save <span class="comment"># 安装 git 插件</span></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>之后就可以在电脑里新建一个文件夹来作为存放博客全部内容。我们直接用 hexo 命令来初始化文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><code>&lt;folder&gt;</code>就是文件夹的名字在创建的时候 ，文件夹初始化已经把需要的内容都下载进去了。</p><p><em>注意：</em><br><code>&lt;folder&gt;</code>必须是一个空的文件夹，否者会创建失败</p><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="comment"># 启动服务器，在本地查看内容</span></span><br></pre></td></tr></table></figure><p>在 <code>source-&gt;_posts</code> 文件夹下，有一篇 helloworld 的初始化文章，在地址栏中输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>我们就可以看到博客内容，我们的博客运行成功啦！！！</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开配置文档_config.yml，对它做如下修改，repo 后面的内容是 <a href="mailto:git@gitbub.com" target="_blank" rel="noopener">git@gitbub.com</a>:username/库地址的形式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:Hugking/Hugking.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><em>注意:</em><br>属性和内容之间一定要有一个空格，配置文件有自己的格式规范。</p><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>第一次部署的时候，我们会重点用到 hexo init 这个命令外，在平时写博客和发布过程中最常用的就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &lt;filename&gt; 新建文章</span><br><span class="line">hexo s 启动服务器，在本地查看内容</span><br><span class="line">hexo g 生成静态页面</span><br><span class="line">hexo d 部署到网站</span><br></pre></td></tr></table></figure><p>以上四个步骤。</p><p>其实以上命令我觉得就足够了，文档里还有很多功能,搭建好后我们在https://用户名(Hugking).github.io就可以看到博客内容。</p><h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>在 hexo 官网上下载自己喜欢的 theme，点击图片可以预览主题，点击图片下面的文字就可以打开 github 下载链接。</p><p>复制源码的 url，在 git hash 命令窗口下载主题，输入<code>git clone</code> url，注意得手动粘贴，<code>Ctrl+v</code>无效</p><p>接着，将配置文件_config.yml 中的 theme 改为新的主题的名字，记住一定要将下载下来的文件夹放到 themes 文件夹里！</p><h2 id="文件解释"><a href="#文件解释" class="headerlink" title="文件解释"></a>文件解释</h2><p>新建好的文件夹目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>博客的配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面。</p><p><strong>package.json</strong></p><p>应用程序信息，新添加的插件内容也会出现在这里面，我们可以不修改这里的内容。</p><p><strong>scaffolds</strong></p><p>scaffolds 就是脚手架的意思，这里放了三个模板文件，分别是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。<br>这部分可以修改的内容是，我们可以在模板上添加比如 categories 等自定义内容</p><p><strong>source</strong></p><p>source 是放置我们博客内容的地方，里面初始只有两个文件夹，一个是 drafts（草稿），一个 posts（文章），但之后我们通过命令新建 tags（标签）还有 categories（分类）页后，这里会相应地增加文件夹。</p><p><strong>themes</strong></p><p>放置主题文件包的地方。Hexo 会根据这个文件来生成静态页面。<br>初始状态下只有 landscape 一个文件夹，后续我们可以添加自己喜欢的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上为初次使用Hexo的基本步骤，下次我们来说如何创建并发布一篇新文章，作为小白，要走的路还很长，加油吧！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;运用-hexo-在-GitHub-上搭建个人博客&quot;&gt;&lt;a href=&quot;#运用-hexo-在-GitHub-上搭建个人博客&quot; class
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.wkaanig.cn/categories/Hexo/"/>
    
    
      <category term="杂项" scheme="http://www.wkaanig.cn/tags/%E6%9D%82%E9%A1%B9/"/>
    
      <category term="个人博客" scheme="http://www.wkaanig.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="GitHub-Page" scheme="http://www.wkaanig.cn/tags/GitHub-Page/"/>
    
  </entry>
  
  <entry>
    <title>Git Hook 远程推送至服务器实现自动部署</title>
    <link href="http://www.wkaanig.cn/2019/09/10/Git-hook/"/>
    <id>http://www.wkaanig.cn/2019/09/10/Git-hook/</id>
    <published>2019-09-10T12:34:31.660Z</published>
    <updated>2019-09-10T13:14:23.735Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><p><strong>应用场景</strong><br>本地开发的业务代码需要在服务器上测试，之前本人的做法都是将本地代码打包并通过 ftp 传输至服务器解压缩，发现每次都太繁琐了，并且改动不易观察出来，于是便想到了 git 远程仓库，为什么不在服务器上创建一个版本库与本地同步，然后就发现了 <code>git hooks</code> ,实现自动部署代码，异常方便，记录下来这个简单的流程。<br>搭建<code>Git 服务器</code>需要准备一台运行 Linux 的机器，强烈推荐用 Ubuntu 或 Debian ，这样，通过几条简单的 <code>apt</code> 命令就可以完成安装。假设你已经有 <code>sudo</code> 权限的用户账号，下面，正式开始安装。</p><h2 id="1-服务器安装-git"><a href="#1-服务器安装-git" class="headerlink" title="1. 服务器安装 git"></a>1. 服务器安装 <code>git</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="2-创建一个-git-用户用来运行-git-服务"><a href="#2-创建一个-git-用户用来运行-git-服务" class="headerlink" title="2. 创建一个 git 用户用来运行 git 服务"></a>2. 创建一个 <code>git</code> 用户用来运行 <code>git</code> 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser git</span><br></pre></td></tr></table></figure><ul><li>当然你也可以创建你想管理 git 的用户名</li></ul><h2 id="3-创建证书登录"><a href="#3-创建证书登录" class="headerlink" title="3. 创建证书登录"></a>3. 创建证书登录</h2><p>收集所有需要登录的用户客户端的公钥，就是他们自己的 id_rsa.pub 文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code> 文件里，一行一个，下次你用git时就不需要输入用户名和密码了。</p><h2 id="4-服务器初始化Git仓库："><a href="#4-服务器初始化Git仓库：" class="headerlink" title="4. 服务器初始化Git仓库："></a>4. 服务器初始化<code>Git</code>仓库：</h2><p>先选定一个目录作为Git仓库，假定是 <code>/home/git/code/test.git</code> ，在目录下输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo git init --bare test.git</span><br></pre></td></tr></table></figure><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以 <code>.git</code> 结尾。然后，把 owner 改为 <code>git</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R git:git test.git</span><br></pre></td></tr></table></figure><p>一个空的git仓库就在服务器上建好了，仓库的地址为(可以本地测试一下 <code>git clone</code> 这个远程仓库):<br><code>ssh://git@你的服务器ip:/home/git/code/test.git</code></p><h2 id="5-网站的根目录-git-clone-服务器仓库"><a href="#5-网站的根目录-git-clone-服务器仓库" class="headerlink" title="5. 网站的根目录 git clone 服务器仓库"></a>5. 网站的根目录 <code>git clone</code> 服务器仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/www/html</span><br><span class="line">$ sudo git <span class="built_in">clone</span> /home/git/code/test.git</span><br><span class="line">$ sudo chmod -R 777 ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="6-为远程仓库设置-hook"><a href="#6-为远程仓库设置-hook" class="headerlink" title="6.为远程仓库设置 hook"></a>6.为远程仓库设置 <code>hook</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/git/code/test.git/hooks</span><br><span class="line">$ vim post-receive</span><br></pre></td></tr></table></figure><p><em>post-receive</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">unset</span> GIT_DIR</span><br><span class="line">DeployPath=<span class="string">"/var/www/html/test"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DeployPath</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"推送完成"</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>为脚本添加可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +x post-receive</span><br></pre></td></tr></table></figure><h2 id="7-客户端添加服务器远程仓库"><a href="#7-客户端添加服务器远程仓库" class="headerlink" title="7. 客户端添加服务器远程仓库"></a>7. 客户端添加服务器远程仓库</h2><p>以后往这个服务器远程仓库 <code>push</code> 代码时，就会自动触发上面的脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add <span class="built_in">test</span> git@你的服务器ip:/home/git/code/test.git //添加远程仓库并命名为 <span class="built_in">test</span></span><br><span class="line">$ git push <span class="built_in">test</span> master</span><br></pre></td></tr></table></figure><h2 id="8-后续代码的更新："><a href="#8-后续代码的更新：" class="headerlink" title="8. 后续代码的更新："></a>8. 后续代码的更新：</h2><ol><li><p>github 有更新的时候 <code>pull</code> 更新本地部署仓库</p></li><li><p>然后本地先 <code>push</code> 到测试服务器进行测试</p></li><li><p>测试通过之后 <code>push</code> 到正式服务器进行上线</p></li><li><p>代码的回滚:<br>服务器端回滚：推荐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure></li></ol><p>本地仓库回滚： 无需登陆服务器即可实现代码回滚<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^</span><br></pre></td></tr></table></figure><p></p><p>保留代码回滚，然后使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push remote_name local_branch_name -f <span class="comment">#强制推送</span></span><br></pre></td></tr></table></figure><ol start="5"><li>状态查询命令 <code>git status</code></li></ol><h2 id="9-禁用-shell-登录"><a href="#9-禁用-shell-登录" class="headerlink" title="9. 禁用 shell 登录"></a>9. 禁用 shell 登录</h2><p>出于安全考虑，第二步创建的 <code>git</code> 用户不允许登录 shell，这可以通过编辑 <code>/etc/passwd</code> 文件完成。找到类似下面的一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure><p>这样, <code>git</code> 用户可以正常通过 ssh 使用 git，但无法登录 shell，因为我们为 <code>git</code> 用户指定的 <code>git-shell</code> 每次一登录就自动退出。</p><h2 id="10-linux-拓展"><a href="#10-linux-拓展" class="headerlink" title="10.linux 拓展"></a>10.linux 拓展</h2><h3 id="1-创建证书登录"><a href="#1-创建证书登录" class="headerlink" title="1. 创建证书登录"></a>1. 创建证书登录</h3><p>默认情况下，用户的 SSH 密钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] ls ~/.ssh</span><br><span class="line">authorized_keys  id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li><p><em>在服务器端打开 RSA 认证</em><br>在文件 <code>/etc/ssh/sshd_config</code> 中添加下列三行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p><em>服务器导入 id_rsa.pub</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] <span class="built_in">cd</span> ~git/.ssh</span><br><span class="line">[root@localhost .ssh] cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">[root@localhost ~] cat authorized_keys</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyQ6mcBiyiYiScdh9hBua8cXoOx59VVudyAkA+m+Gc+hUF09oKAyf5LlI1RJkbobX90L3afUexqnHT+hka1oaX4Gu7tfHYu7nJyGVPcteebJ14wNec750kUH0sS+f87U+Sb37Ynmh/FCCTUU+m/goimH5oe/gH8uSh3mFBlA+NKcBPRWCx7W44L5MK4YqcbddmjXsp+JAO6tHaYBn3GnLB3UzLbQHX222AGO6nByHNBmRHMXePaIzH76zWiy/OjiciJzRon/riftO+O+qOA9/+ZoB0KzycA0MeEOwqx5iWwRHzx8WrYufC9PZdvlKe/a4KxSG1XA15y69y0dFfl0CL root@localhost.localdomain</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-Linux-上用户创建与删除"><a href="#2-Linux-上用户创建与删除" class="headerlink" title="2.Linux 上用户创建与删除"></a>2.Linux 上用户创建与删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] adduser haha   <span class="comment"># 创建用户 haha 是用户名</span></span><br><span class="line">[root@localhost ~] passwd haha   <span class="comment"># 为该用户设置密码</span></span><br><span class="line">[root@localhost ~] userdel -r haha <span class="comment"># 完全删除用户</span></span><br><span class="line">[root@localhost ~] find / -name <span class="string">"*haha"</span> <span class="comment"># 再使用 find 命令查看，用户相关文件已经删除。</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&lt;br&gt;本地开发的业务代码需要在服务器上测试，之前本人的做法都是将本地代码打包并通过 ftp 传输至服
      
    
    </summary>
    
    
      <category term="Git" scheme="http://www.wkaanig.cn/categories/Git/"/>
    
    
      <category term="自动部署" scheme="http://www.wkaanig.cn/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Python-Flask 使用Sqlacodegen 从数据库表生成model.py</title>
    <link href="http://www.wkaanig.cn/2019/09/10/python_sql_model/"/>
    <id>http://www.wkaanig.cn/2019/09/10/python_sql_model/</id>
    <published>2019-09-10T12:32:49.039Z</published>
    <updated>2019-09-10T13:12:10.442Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><h2 id="1、安装工具"><a href="#1、安装工具" class="headerlink" title="1、安装工具"></a>1、安装工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS E:\Flask&gt; pip install flask-sqlacodegen</span><br><span class="line">Collecting flask-sqlacodegen</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/3b/2a/e47611e4fec19e33af5fc90dd57ec2b064056f6c433804742d66e80b2f57/flask_sqlacodegen-1.1.6.1-py2.py3-none-any.whl</span><br><span class="line">Collecting inflect&gt;=0.2.0 (from flask-sqlacodegen)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/86/02/e6b11020a9c37d25b4767a1d0af5835629f6e75d6f51553ad07a4c73dc31/inflect-2.1.0-py2.py3-none-any.whl (40kB)</span><br><span class="line">     |████████████████████████████████| 51kB 21kB/s</span><br><span class="line">Requirement already satisfied: SQLAlchemy&gt;=0.6.0 <span class="keyword">in</span> e:\-avpfbmcx\lib\site-packages (from flask-sqlacodegen) (1.2.11)</span><br><span class="line">Installing collected packages: inflect, flask-sqlacodegen</span><br><span class="line">Successfully installed flask-sqlacodegen-1.1.6.1 inflect-2.1.0</span><br></pre></td></tr></table></figure><h2 id="2、生成model-py文件-这里我只生成两个表的模型"><a href="#2、生成model-py文件-这里我只生成两个表的模型" class="headerlink" title="2、生成model.py文件(这里我只生成两个表的模型)"></a>2、生成model.py文件(这里我只生成两个表的模型)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-sqlacodegen <span class="string">'mysql+cymysql://root:password@127.0.0.1/test'</span> --tables goods,goods_attribute --outfile <span class="string">"test.py"</span>  --flask</span><br></pre></td></tr></table></figure><h2 id="3、查看文件"><a href="#3、查看文件" class="headerlink" title="3、查看文件"></a>3、查看文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line">from sqlalchemy import Column, DateTime, Integer, Numeric, String, Text</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Good(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">'goods'</span></span><br><span class="line"></span><br><span class="line">    create_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line">    delete_time = db.Column(db.DateTime)</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">    category_id = db.Column(db.Integer, nullable=False, index=True)</span><br><span class="line">    goods_sn = db.Column(db.String(255), nullable=False, index=True)</span><br><span class="line">    name = db.Column(db.String(255), nullable=False)</span><br><span class="line">    brand_id = db.Column(db.Integer, nullable=False, index=True)</span><br><span class="line">    goods_num = db.Column(db.Integer, nullable=False, index=True)</span><br><span class="line">    keywords = db.Column(db.String(255), nullable=False)</span><br><span class="line">    goods_brief = db.Column(db.String(255), nullable=False)</span><br><span class="line">    goods_desc = db.Column(db.Text)</span><br><span class="line">    is_on_sale = db.Column(db.Integer, nullable=False)</span><br><span class="line">    sort_order = db.Column(db.Integer, nullable=False, index=True)</span><br><span class="line">    is_delete = db.Column(db.Integer, nullable=False)</span><br><span class="line">    attribute_category = db.Column(db.Integer, nullable=False, index=True)</span><br><span class="line">    counter_price = db.Column(db.Numeric(10, 2), nullable=False)</span><br><span class="line">    extra_price = db.Column(db.Numeric(10, 2), nullable=False)</span><br><span class="line">    is_new = db.Column(db.Integer, nullable=False)</span><br><span class="line">    goods_unit = db.Column(db.String(255), nullable=False)</span><br><span class="line">    primary_pic_url = db.Column(db.String(255), nullable=False)</span><br><span class="line">    list_pic_url = db.Column(db.String(255), nullable=False)</span><br><span class="line">    retail_price = db.Column(db.Numeric(10, 2), nullable=False)</span><br><span class="line">    sell_volume = db.Column(db.Integer, nullable=False)</span><br><span class="line">    primary_product_id = db.Column(db.Integer, nullable=False)</span><br><span class="line">    unit_price = db.Column(db.Numeric(10, 2), nullable=False)</span><br><span class="line">    promotion_desc = db.Column(db.String(255), nullable=False)</span><br><span class="line">    promotion_tag = db.Column(db.String(255), nullable=False)</span><br><span class="line">    app_exclusive_price = db.Column(db.Numeric(10, 2), nullable=False)</span><br><span class="line">    is_app_exclusive = db.Column(db.Integer, nullable=False)</span><br><span class="line">    is_limited = db.Column(db.Integer, nullable=False)</span><br><span class="line">    is_hot = db.Column(db.Integer, nullable=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsAttribute(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">'goods_attribute'</span></span><br><span class="line"></span><br><span class="line">    create_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line">    delete_time = db.Column(db.DateTime)</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">    goods_id = db.Column(db.Integer, nullable=False, index=True)</span><br><span class="line">    attribute_id = db.Column(db.Integer, nullable=False, index=True)</span><br><span class="line">    values = db.Column(db.Text)</span><br></pre></td></tr></table></figure><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、安装工具&quot;&gt;&lt;a href=&quot;#1、安装工具&quot; class=&quot;headerlink&quot; title=&quot;1、安装工具&quot;&gt;&lt;/a&gt;1、安
      
    
    </summary>
    
    
      <category term="Python" scheme="http://www.wkaanig.cn/categories/Python/"/>
    
    
      <category term="Flask" scheme="http://www.wkaanig.cn/tags/Flask/"/>
    
      <category term="工具" scheme="http://www.wkaanig.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>商城系统项目搭建 01</title>
    <link href="http://www.wkaanig.cn/2019/09/10/python_flask_01/"/>
    <id>http://www.wkaanig.cn/2019/09/10/python_flask_01/</id>
    <published>2019-09-10T12:32:49.035Z</published>
    <updated>2019-09-10T13:51:39.045Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><p><em>应用说明：基于 python flask 开发网上商城详细步骤</em></p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ol><li>使用 python3 创建虚拟环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv py3venv <span class="comment">#创建一个py3venv的虚拟环境</span></span><br></pre></td></tr></table></figure><ol start="2"><li>激活虚拟环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ./py3venv/bin/activate</span><br></pre></td></tr></table></figure><ol start="3"><li>创建项目目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir shop</span><br></pre></td></tr></table></figure><ol start="4"><li>为项目 shop 安装依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> shop</span><br></pre></td></tr></table></figure><ol start="5"><li>安装和卸载包</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask <span class="comment"># 安装包</span></span><br><span class="line">pip uinstall flask <span class="comment"># 卸载包</span></span><br></pre></td></tr></table></figure><ol start="6"><li>退出虚拟环境</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate: 退出虚拟环境</span><br></pre></td></tr></table></figure><ol start="7"><li>初始化环境安装依赖</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt;requirements.txt <span class="comment">#生成全部依赖 requirements.txt用来记录项目所有的依赖包和版本号，只需要一个简单的pip命令就能完成。</span></span><br><span class="line">pip install -r requirements.txt <span class="comment">#安装全部依赖</span></span><br></pre></td></tr></table></figure><p><code>requirements.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">flask-sqlalchemy</span><br><span class="line">flask-debugtoolbar</span><br><span class="line">mysqlclient</span><br><span class="line">flask_script</span><br><span class="line">requests</span><br><span class="line">uwsgi <span class="comment">#Linux部署用，window会无法安装</span></span><br></pre></td></tr></table></figure><p><code>环境（application.py）</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ops_config=base <span class="comment">#基本环境</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ops_config=<span class="built_in">local</span> <span class="comment">#本地环境</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ops_config=production <span class="comment">#生产环境</span></span><br></pre></td></tr></table></figure><h1 id="mysql-踩坑"><a href="#mysql-踩坑" class="headerlink" title="mysql 踩坑"></a>mysql 踩坑</h1><h3 id="用-vscode-连接-mysql-时出现报错"><a href="#用-vscode-连接-mysql-时出现报错" class="headerlink" title="用 vscode 连接 mysql 时出现报错"></a><strong>用 vscode 连接 mysql 时出现报错</strong></h3><figure class="highlight plain"><figcaption><span>ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### **_node 使用 mysql 报错_**</span><br><span class="line"></span><br><span class="line">原因：登录数据库的客户端跟 mysql8.0 不兼容了，mysql8.0 密码认证采用了新的密码格式</span><br><span class="line"></span><br><span class="line">解决办法：在系统 mysql 终端输入下面命令</span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">//password 是你的数据库账户密码，root和host也是</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</span><br></pre></td></tr></table></figure><h1 id="搭建项目目录"><a href="#搭建项目目录" class="headerlink" title="搭建项目目录"></a>搭建项目目录</h1><ol><li>创建项目根目录 shop</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir shop</span><br></pre></td></tr></table></figure><ol start="2"><li>在 shop 目录下创建包 config 用来管理配置文件</li></ol><p>通用配置文件<code>config/base_setting.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line">SERVER_PORT = <span class="number">5000</span></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">SQLALCHEMY_ECHO = <span class="literal">False</span></span><br></pre></td></tr></table></figure><ol start="3"><li>本地配置文件</li></ol><p><code>config/local_setting.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line">SQLALCHEMY_ECHO = <span class="literal">True</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">'mysql://root:mysql@127.0.0.1/mysql?charset=utf8mb4'</span></span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br><span class="line">SQLALCHEMY_ENCODING = <span class="string">"utf8mb4"</span></span><br></pre></td></tr></table></figure><ol start="4"><li>生产配置文件</li></ol><p><code>config/production_setting.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在 shop 目录下创建 application.py 封装 flask 的全局变量</li></ol><p><code>application.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span><span class="params">( Flask )</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,import_name)</span>:</span></span><br><span class="line">        super( Application,self ).__init__( import_name )</span><br><span class="line">        self.config.from_pyfile( <span class="string">'config/base_setting.py'</span> )</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"ops_config"</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">            self.config.from_pyfile( <span class="string">'config/%s_setting.py'</span>%os.environ[<span class="string">'ops_config'</span>] )</span><br><span class="line"></span><br><span class="line">        db.init_app( self )</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">app = Application( __name__ )</span><br><span class="line">manager = Manager( app )</span><br></pre></td></tr></table></figure><ol start="6"><li>在 shop 目录下创建 <a href="http://www.py" target="_blank" rel="noopener">www.py</a> 封装 HTTP 相关初始化</li></ol><p><code>www.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"><span class="keyword">from</span> application <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> web.controllers.index <span class="keyword">import</span> route_index</span><br><span class="line"></span><br><span class="line">app.register_blueprint( route_index,url_prefix = <span class="string">"/"</span> )</span><br></pre></td></tr></table></figure><ol start="7"><li>在 shop 目录下创建 manager.py 启动入口</li></ol><p><code>manager.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"><span class="keyword">from</span> application <span class="keyword">import</span> app,manager</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Server</span><br><span class="line"><span class="keyword">import</span> www</span><br><span class="line"></span><br><span class="line"><span class="comment">##web server</span></span><br><span class="line">manager.add_command( <span class="string">"runserver"</span>, Server( host=<span class="string">'0.0.0.0'</span>,port=app.config[<span class="string">'SERVER_PORT'</span>],use_debugger = <span class="literal">True</span> ,use_reloader = <span class="literal">True</span>) )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    manager.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> sys</span><br><span class="line">        sys.exit( main() )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">import</span> traceback</span><br><span class="line">        traceback.print_exc()</span><br></pre></td></tr></table></figure><ol start="8"><li>在 shop 目录下创建 readme.md</li></ol><p><code>readme.md</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Python Flask 商城系统</span><br><span class="line">=====================</span><br><span class="line"><span class="comment">##启动</span></span><br><span class="line">* export ops_config=local|production &amp;&amp; python manage.py runserver</span><br><span class="line"></span><br><span class="line"><span class="comment">##flask-sqlacodegen</span></span><br><span class="line"></span><br><span class="line">    flask-sqlacodegen <span class="string">'mysql://root:password@127.0.0.1/shop_db'</span> --outfile <span class="string">"common/models/model.py"</span>  --flask</span><br><span class="line">    flask-sqlacodegen <span class="string">'mysql://root:password@127.0.0.1/shop_db'</span> --tables user --outfile <span class="string">"common/models/user.py"</span>  --flask</span><br><span class="line"></span><br><span class="line"><span class="comment">## 所见即所得编辑器ueditor</span></span><br><span class="line"></span><br><span class="line">    &lt;script src="&#123;&#123; buildStaticUrl('/plugins/ueditor/ueditor.config.js') &#125;&#125;"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src="&#123;&#123; buildStaticUrl('/plugins/ueditor/ueditor.all.min.js') &#125;&#125;"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src="&#123;&#123; buildStaticUrl('/plugins/ueditor/lang/zh-cn/zh-cn.js') &#125;&#125;"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    UE.getEditor(<span class="string">'editor'</span>,&#123;</span><br><span class="line">       toolbars: [</span><br><span class="line">            [ <span class="string">'undo'</span>, <span class="string">'redo'</span>, <span class="string">'|'</span>,</span><br><span class="line">                <span class="string">'bold'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>, <span class="string">'strikethrough'</span>, <span class="string">'removeformat'</span>, <span class="string">'formatmatch'</span>, <span class="string">'autotypeset'</span>, <span class="string">'blockquote'</span>, <span class="string">'pasteplain'</span>, <span class="string">'|'</span>, <span class="string">'forecolor'</span>, <span class="string">'backcolor'</span>, <span class="string">'insertshopedlist'</span>, <span class="string">'insertunshopedlist'</span>, <span class="string">'selectall'</span>,  <span class="string">'|'</span>,<span class="string">'rowspacingtop'</span>, <span class="string">'rowspacingbottom'</span>, <span class="string">'lineheight'</span>],</span><br><span class="line">            [ <span class="string">'customstyle'</span>, <span class="string">'paragraph'</span>, <span class="string">'fontfamily'</span>, <span class="string">'fontsize'</span>, <span class="string">'|'</span>,</span><br><span class="line">                <span class="string">'directionalityltr'</span>, <span class="string">'directionalityrtl'</span>, <span class="string">'indent'</span>, <span class="string">'|'</span>,</span><br><span class="line">                <span class="string">'justifyleft'</span>, <span class="string">'justifycenter'</span>, <span class="string">'justifyright'</span>, <span class="string">'justifyjustify'</span>, <span class="string">'|'</span>, <span class="string">'touppercase'</span>, <span class="string">'tolowercase'</span>, <span class="string">'|'</span>,</span><br><span class="line">                <span class="string">'link'</span>, <span class="string">'unlink'</span>],</span><br><span class="line">            [ <span class="string">'imagenone'</span>, <span class="string">'imageleft'</span>, <span class="string">'imageright'</span>, <span class="string">'imagecenter'</span>, <span class="string">'|'</span>,</span><br><span class="line">                <span class="string">'insertimage'</span>, <span class="string">'insertvideo'</span>, <span class="string">'|'</span>,</span><br><span class="line">                <span class="string">'horizontal'</span>, <span class="string">'spechars'</span>,<span class="string">'|'</span>,<span class="string">'inserttable'</span>, <span class="string">'deletetable'</span>, <span class="string">'insertparagraphbeforetable'</span>, <span class="string">'insertrow'</span>, <span class="string">'deleterow'</span>, <span class="string">'insertcol'</span>, <span class="string">'deletecol'</span>, <span class="string">'mergecells'</span>, <span class="string">'mergeright'</span>, <span class="string">'mergedown'</span>, <span class="string">'splittocells'</span>, <span class="string">'splittorows'</span>, <span class="string">'splittocols'</span> ]</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">        enableAutoSave:true,</span><br><span class="line">        saveInterval:<span class="number">60000</span>,</span><br><span class="line">        elementPathEnabled:false,</span><br><span class="line">        zIndex:<span class="number">4</span>,</span><br><span class="line">        serverUrl:common_ops.buildUrl(  <span class="string">'/upload/ueditor'</span> )</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">##可参考资料</span></span><br><span class="line">* [python-Flask（jinja2）语法：过滤器](https://www.jianshu.com/p/<span class="number">3127</span>ac233518)</span><br><span class="line">* [SQLAlchemy 各种查询语句写法](https://wxnacy.com/<span class="number">2017</span>/<span class="number">08</span>/<span class="number">14</span>/python<span class="number">-2017</span><span class="number">-08</span><span class="number">-14</span>-sqlalchemy-filter/)</span><br></pre></td></tr></table></figure><ol start="9"><li>在 shop 目录下创建 requirements.txt</li></ol><p><code>requirements.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">flask-sqlalchemy</span><br><span class="line">flask-debugtoolbar</span><br><span class="line">mysqlclient</span><br><span class="line">flask_script</span><br><span class="line">requests</span><br></pre></td></tr></table></figure><ol start="10"><li>在 shop 目录下创建 common 包 存放公用部分</li></ol><p><code>common/__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><p><code>common/libs/__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><p><code>common/models/__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><ol start="11"><li>在 shop 目录下创建 doc 目录 存放存放文档</li></ol><p><code>doc/mysql.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库变更记录</span><br><span class="line">==================</span><br></pre></td></tr></table></figure><ol start="12"><li>在 shop 目录下创建 jobs 包 用来存放一些定时的任务</li></ol><p><code>jobs/__init__.py_</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><p><code>jobs/task/__init__.py_</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><ol start="13"><li>在 shop 目录下创建 web 包用来存放蓝图</li></ol><p><code>web/__init__.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><p><code>web/controllers/index.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">route_index = Blueprint( <span class="string">'index_page'</span>,__name__ )</span><br><span class="line"></span><br><span class="line"><span class="meta">@route_index.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p><code>web/controllers/__init__.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br></pre></td></tr></table></figure><h1 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h1><ol><li>在终端添加环境变量</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ops_config=<span class="built_in">local</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><ol start="3"><li>输入测试 url</li></ol><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; http://127.0.0.1:5000/</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;em&gt;应用说明：基于 python flask 开发网上商城详细步骤&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境
      
    
    </summary>
    
    
      <category term="Python" scheme="http://www.wkaanig.cn/categories/Python/"/>
    
    
      <category term="商城" scheme="http://www.wkaanig.cn/tags/%E5%95%86%E5%9F%8E/"/>
    
      <category term="Flask" scheme="http://www.wkaanig.cn/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>操作系统引论</title>
    <link href="http://www.wkaanig.cn/2019/09/10/os1/"/>
    <id>http://www.wkaanig.cn/2019/09/10/os1/</id>
    <published>2019-09-10T12:32:49.018Z</published>
    <updated>2019-09-10T13:06:23.224Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><h2 id="一、操作系统的目标与作用"><a href="#一、操作系统的目标与作用" class="headerlink" title="一、操作系统的目标与作用"></a>一、操作系统的目标与作用</h2><p>操作系统(Operating System)是配置在计算机硬件上的第一层软件，是对计算机系统的首次扩充。其主要作用是管理好这些设备，提高他们的利用率和系统的吞吐量，并为用户和应用程序提供一个简单的接口，便于用户使用。</p><h3 id="操作系统的目标"><a href="#操作系统的目标" class="headerlink" title="操作系统的目标"></a>操作系统的目标</h3><ul><li><code>方便性</code></li><li><code>有效性</code></li><li><code>可扩充性</code></li><li><code>开放性</code></li></ul><h3 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h3><ul><li><code>os作为用户与计算机硬件系统之间的接口</code></li><li><code>os作为计算机系统资源的管理者</code></li><li><code>os实现了对计算机资源的抽象</code></li></ul><h3 id="推动操作系统发展的主要动力"><a href="#推动操作系统发展的主要动力" class="headerlink" title="推动操作系统发展的主要动力"></a>推动操作系统发展的主要动力</h3><ul><li><code>不断提高计算机资源的利用率</code></li><li><code>方便用户</code></li><li><code>器件不断的更新换代</code></li><li><code>计算机体系结构的不断发展</code></li><li><code>不断提出新的应用需求</code></li></ul><h2 id="二、计算机操作系统发展的过程"><a href="#二、计算机操作系统发展的过程" class="headerlink" title="二、计算机操作系统发展的过程"></a>二、计算机操作系统发展的过程</h2><h3 id="未配置操作系统的计算机系统"><a href="#未配置操作系统的计算机系统" class="headerlink" title="未配置操作系统的计算机系统"></a>未配置操作系统的计算机系统</h3><p>人工操作方式</p><ul><li><code>脱机输入输出方式</code></li></ul><p>单道批处理系统</p><ul><li><code>单道批处理系统最主要的缺点是系统中的资源得不到充分利用</code></li></ul><p>多道批处理系统的优缺点</p><ul><li><code>资源利用率高。</code></li><li><code>系统吞吐量大能提高系统存储量的主要原因，可归纳为</code><ul><li><code>CPU和其他资源保持忙碌状态</code></li><li><code>仅当作业完成时或运行不下去时才进行切换系统开销小</code></li></ul></li><li><code>平均周转时间长</code></li><li><code>无交互能力</code></li></ul><p>分时系统(time sharing system)</p><ul><li><code>推动分时系统形成和发展的主要动力则是为了满足用户对人机交互的需求，由此形成了一种新型os</code></li></ul><p>实时系统(Real time system)</p><ul><li><code>实时系统最主要的特征是将时间作为关键参数，它必须对所接收到的某些信号作出及时或实时的反应。</code></li></ul><ul><li><code>实时系统的类型</code><ul><li><code>工业武器控制系统</code></li><li><code>信息查询系统</code></li><li><code>多媒体系统。</code></li><li><code>嵌入式系统。</code></li></ul></li></ul><h2 id="三、操作系统的基本特征"><a href="#三、操作系统的基本特征" class="headerlink" title="三、操作系统的基本特征"></a>三、操作系统的基本特征</h2><p>并发</p><ul><li><code>并行与并发</code><br><code>并行是指两个或多个事件在同一时刻发生</code><br><code>并发是指两个或多个事件在同一时间间隔内发生</code></li><li><code>引用进程</code><br><code>在一个未引入进程的系统中，在属于同一个应用程序的计算机程序和I/O程序之间只能是顺序执行，既只有在计算机程序执行告一段落后才引起I/o执行，反之在程序执行I/O操作时，计算机程序也不能执行，但在为计算程序和Io程序分别建立一个进程后，两个进程便可并发执行。这样便能极大的提高系统资源的利用率，增加系统的吞吐量。</code></li></ul><p>共享</p><ul><li><code>互斥共享方式。</code></li><li><code>同时访问方式。</code></li></ul><p>虚拟</p><ul><li><code>时分复用技术。</code></li><li><code>空分复用技术。</code></li></ul><p>异步</p><h2 id="四、操作系统的主要功能"><a href="#四、操作系统的主要功能" class="headerlink" title="四、操作系统的主要功能"></a>四、操作系统的主要功能</h2><p>处理机管理功能。</p><ul><li><code>进程控制</code></li><li><code>进程同步</code></li><li><code>进程通信</code></li><li><code>调度</code></li></ul><p>存储器管理功能</p><ul><li><code>内存分配，内存保护地址映设内存扩充</code></li></ul><p>设备管理功能。</p><ul><li><code>缓冲管理，设备分配，设备处理。</code></li></ul><p>文件管理功能</p><ul><li><code>文件存储空间的管理</code></li><li><code>目录管理</code></li><li><code>文件读写管理与保护。</code></li></ul><p>操作系统与用户之间的接口</p><ul><li><code>用户接口与程序接口。</code></li></ul><p>现代操作系统的新功能</p><ul><li><code>系统安全</code></li><li><code>网络的功能和服务</code></li><li><code>支持多媒体。</code></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、操作系统的目标与作用&quot;&gt;&lt;a href=&quot;#一、操作系统的目标与作用&quot; class=&quot;headerlink&quot; title=&quot;一、操
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://www.wkaanig.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="杂项" scheme="http://www.wkaanig.cn/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云 Ubuntu 开启 Root 用户登录并修改系统语言为中文</title>
    <link href="http://www.wkaanig.cn/2019/09/10/ubuntu_root/"/>
    <id>http://www.wkaanig.cn/2019/09/10/ubuntu_root/</id>
    <published>2019-09-10T12:32:49.010Z</published>
    <updated>2019-09-10T13:48:12.683Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><p><strong>应用说明</strong><br>腾讯云主机 ubuntu 系统默认用户名为 ubuntu，修改文件需要 root 权限太过繁琐，为了方便改成 root 用户登录</p><h2 id="一、腾讯讯云主机开启-root-用户登录如下："><a href="#一、腾讯讯云主机开启-root-用户登录如下：" class="headerlink" title="一、腾讯讯云主机开启 root 用户登录如下："></a>一、腾讯讯云主机开启 root 用户登录如下：</h2><ul><li>腾讯云主机ubuntu 系统默认用户名为 ubuntu</li></ul><ul><li><p>1.修改root密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">Enter new UNIX password: // 输入新密码</span><br><span class="line">Retype new UNIX password: // 重复密码</span><br><span class="line">passwd: password updated successfully // 修改成功</span><br></pre></td></tr></table></figure></li><li><p>2.修改 sshd_config 配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># Authentication:</span></span><br><span class="line">LoginGraceTime 120</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">StrictModes yes</span><br></pre></td></tr></table></figure></li><li><p>3.最后重启下ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、修改系统语言为中文"><a href="#二、修改系统语言为中文" class="headerlink" title="二、修改系统语言为中文"></a>二、修改系统语言为中文</h2><ul><li><p>1.查看当前语言环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br></pre></td></tr></table></figure></li><li><p>2.查看当前系统是否有中文语言包（<code>zh_CN.utf8</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale -a</span><br></pre></td></tr></table></figure></li><li><p>3.安装中文语言包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install language-pack-zh-hans</span><br></pre></td></tr></table></figure></li><li><p>4.再次查看是否有中文语言包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale -a</span><br></pre></td></tr></table></figure></li><li><p>5.修改系统环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><p>加入下面这一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=<span class="string">"zh_CN.utf8"</span></span><br></pre></td></tr></table></figure><ul><li>6.执行修改<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><p>此时已更改成功</p><h2 id="三、更新系统（可选）"><a href="#三、更新系统（可选）" class="headerlink" title="三、更新系统（可选）"></a>三、更新系统（可选）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update </span><br><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;应用说明&lt;/strong&gt;&lt;br&gt;腾讯云主机 ubuntu 系统默认用户名为 ubuntu，修改文件需要 root 权限太过繁琐
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.wkaanig.cn/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://www.wkaanig.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件常用操作命令</title>
    <link href="http://www.wkaanig.cn/2019/09/10/linux_file/"/>
    <id>http://www.wkaanig.cn/2019/09/10/linux_file/</id>
    <published>2019-09-10T12:32:49.004Z</published>
    <updated>2019-09-10T13:48:04.732Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><p><em>应用说明：记录Linux文件常用操作命令</em></p><h2 id="压缩与解压文件"><a href="#压缩与解压文件" class="headerlink" title="压缩与解压文件"></a>压缩与解压文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar</span><br><span class="line">-c: 建立压缩档案</span><br><span class="line">-x：解压</span><br><span class="line">-t：查看内容</span><br><span class="line">-r：向压缩归档文件末尾追加文件</span><br><span class="line">-u：更新原压缩包中的文件</span><br></pre></td></tr></table></figure><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p><p><code>-z：有gzip属性的</code></p><p><code>-j：有bz2属性的</code></p><p><code>-Z：有compress属性的</code></p><p><code>-v：显示所有过程</code></p><p><code>-O：将文件解开到标准输出</code></p><p><strong>下面的参数-f是必须的</strong></p><p><code>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</code></p><p><strong><em>示例：</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -cf all.tar *.jpg</span><br><span class="line">这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</span><br><span class="line">tar -rf all.tar *.gif</span><br><span class="line">这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</span><br><span class="line">tar -uf all.tar logo.gif</span><br><span class="line">这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</span><br><span class="line">tar -tf all.tar</span><br><span class="line">这条命令是列出all.tar包中所有文件，-t是列出文件的意思</span><br><span class="line">tar -xf all.tar</span><br><span class="line">这条命令是解出all.tar包中所有文件，-t是解开的意思</span><br></pre></td></tr></table></figure><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf jpg.tar *.jpg      //将目录里所有jpg文件打包成tar.jpg </span><br><span class="line">tar -czf jpg.tar.gz *.jpg  //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</span><br><span class="line">tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</span><br><span class="line">tar -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</span><br><span class="line">rar a jpg.rar *.jpg        //rar格式的压缩，需要先下载rar <span class="keyword">for</span> linux</span><br><span class="line">zip jpg.zip *.jpg          //zip格式的压缩，需要先下载zip <span class="keyword">for</span> linux</span><br></pre></td></tr></table></figure><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><p><strong><em>tar -zcvf 打包后生成的文件名全路径 要打包的目录</em></strong></p><p>把/xahot文件夹打包后生成一个/home/xahot.tar.gz的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf /home/xahot.tar.gz /xahot</span><br></pre></td></tr></table></figure><p><strong><em>zip 压缩方法：压缩当前的文件夹 zip -r ./xahot.zip ./</em> -r表示递归*</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip [参数] [打包后的文件名] [打包的目录路径]</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf file.tar       //解压 tar包</span><br><span class="line">tar -xzvf file.tar.gz   //解压tar.gz</span><br><span class="line">tar -xjvf file.tar.bz2  //解压 tar.bz2</span><br><span class="line">tar -xZvf file.tar.Z    //解压tar.Z</span><br><span class="line">unrar e file.rar        //解压rar</span><br><span class="line">unzip file.zip          //解压zip</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、*.tar 用 tar -xvf 解压</span><br><span class="line">2、*.gz 用 gzip -d或者gunzip 解压</span><br><span class="line">3、*.tar.gz和*.tgz 用 tar -xzf 解压</span><br><span class="line">4、*.bz2 用 bzip2 -d或者用bunzip2 解压</span><br><span class="line">5、*.tar.bz2用tar -xjf 解压</span><br><span class="line">6、*.Z 用 uncompress 解压</span><br><span class="line">7、*.tar.Z 用tar -xZf 解压</span><br><span class="line">8、*.rar 用 unrar e解压</span><br><span class="line">9、*.zip 用 unzip 解压</span><br></pre></td></tr></table></figure><p><strong><em>示例：</em></strong></p><p>解压jdk到指定文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf jdk-8u131-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/java</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;em&gt;应用说明：记录Linux文件常用操作命令&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;压缩与解压文件&quot;&gt;&lt;a href=&quot;#压缩与解压文件&quot; cla
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.wkaanig.cn/categories/Linux/"/>
    
    
      <category term="命令" scheme="http://www.wkaanig.cn/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>C# 中常用的类和结构</title>
    <link href="http://www.wkaanig.cn/2019/09/10/c_type/"/>
    <id>http://www.wkaanig.cn/2019/09/10/c_type/</id>
    <published>2019-09-10T12:32:48.967Z</published>
    <updated>2019-09-10T13:47:17.819Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --><ul><li>String类（C#中 String 与 string 具有相同的含义）</li></ul><ol><li>静态</li></ol><p><code>Compare</code></p><p><code>Concat</code></p><p><code>Format</code></p><ol start="2"><li>非静态方法</li></ol><p><code>Contains</code></p><p><code>CompareTo</code></p><p><code>Equals</code></p><p><code>IndexOf</code></p><p><code>Insert</code></p><p><code>Remove</code></p><p><code>Replace</code></p><p><code>Split</code></p><p><code>Substring</code></p><p><code>Trim</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Sep 10 2019 22:01:44 GMT+0800 (GMT+08:00) --&gt;&lt;ul&gt;&lt;li&gt;String类（C#中 String 与 string 具有相同的含义）&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;静态&lt;/li&gt;&lt;/ol&gt;&lt;
      
    
    </summary>
    
    
      <category term="C#" scheme="http://www.wkaanig.cn/categories/C/"/>
    
    
      <category term="C#基本知识" scheme="http://www.wkaanig.cn/tags/C-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
